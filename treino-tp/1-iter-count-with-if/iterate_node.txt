#pragma once

#include <string>
#include <cdk/ast/expression_node.h>
#include <cdk/ast/basic_node.h>

namespace udf {

  class iterate_node: public cdk::basic_node {
    cdk::expression_node *_vector;
    cdk::expression_node *_count;
    std::string _identifier;
    cdk::expression_node *_condition;


  public:
    iterate_node(int lineno, cdk::expression_node *vector, cdk::expression_node *count, const std::string &identifier,
                 cdk::expression_node *condition) :
        cdk::basic_node(lineno), _vector(vector), _count(count), _identifier(identifier), _condition(condition) {
    }

    cdk::expression_node* vector() { return _vector; }

    cdk::expression_node* count() { return _count; }

    const std::string& identifier() { return _identifier; }

    cdk::expression_node* condition() { return _condition; }

    void accept(basic_ast_visitor *sp, int level) { sp->do_iterate_node(this, level); }

  };

} // udf
